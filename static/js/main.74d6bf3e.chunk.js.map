{"version":3,"sources":["_lib/reconnecting-socket/index.js","components/stock-data/elements/stock-row/index.js","components/stock-data/index.js","App.js","serviceWorker.js","index.js"],"names":["WebsocketService","url","_this","this","Object","classCallCheck","resetSocket","socket","close","observer","complete","undefined","startSocket","WebSocket","onopen","handleOpen","onmessage","handleMessage","onclose","handleClose","onEmptied","handleError","connect","Observable","create","e","next","error","send","data","JSON","stringify","Error","unsubscribe","StockRow","getReadableTime","date","toTimeString","substr","_this$props","props","name","value","updated_at","previous_value","classes","react_default","a","createElement","Fragment","TableRow_default","TableCell_default","align","className","concat","up","down","Component","withStyles","color","StockTable","possibleConstructorReturn","getPrototypeOf","call","state","stock_data","handleIncoming","i","length","item","Date","setState","getTableRows","table","key","push","stock_row","assign","socket_service","_this2","subscribe","parse","err","console","log","Paper_default","container","Table_default","TableHead_default","TableBody_default","maxWidth","margin","App","root","AppBar_default","position","Toolbar_default","Typography_default","variant","components_stock_data","padding","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74d6bf3e.chunk.js","sourcesContent":["import {Observable} from 'rxjs'\n\nclass WebsocketService {\n    url;\n    socket;\n    observer;\n\n    constructor(url){\n        this.url = url;\n    }\n\n    resetSocket = ()=>{\n        if (this.socket){\n            this.socket.close()\n        }\n        if(this.observer){\n            this.observer.complete('Connection Closed')\n        }\n        this.socket = undefined;\n        this.observer = undefined;\n        return true;\n    }\n\n    startSocket = ()=>{\n        this.socket = new WebSocket(this.url);\n        this.socket.onopen = this.handleOpen\n        this.socket.onmessage = this.handleMessage\n        this.socket.onclose = this.handleClose\n        this.socket.onEmptied = this.handleError\n    }\n\n    connect = ()=>{\n\n        return Observable.create(\n            (observer)=>{\n                this.startSocket()\n                this.observer =observer;\n            }\n        )\n    }\n\n    handleOpen = (e)=>{\n        // this.observer.next(e)\n    }\n\n    handleMessage = (e)=>{\n        this.observer.next(e)\n    }\n    handleClose = (e)=>{\n        this.observer.complete(e)\n        this.resetSocket()\n    }\n\n    handleError = (e)=>{\n        this.observer.error(e)\n    }\n\n    send = (data)=>{\n        if (this.socket){\n            return this.socket.send(JSON.stringify(data))\n        }\n        return new Error('Connection Already Closed')\n\n    }\n\n    unsubscribe = ()=> {\n        return this.resetSocket()\n    }\n\n}\n\nexport default  WebsocketService;","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nconst styles = {\n    down:{\n        color: '#b00020',\n    },\n    up:{\n        color: '#03dac6'\n    }\n}\n\nclass StockRow extends Component{\n\n    getReadableTime = (date)=>{\n        // return date.getHours() + ':'+ date.getMinutes()\n        return date.toTimeString().substr(0,5)\n    }\n\n    render(){\n        const {name, value, updated_at, previous_value, classes} = this.props;\n        return(\n            <React.Fragment>\n                <TableRow >\n                    <TableCell >{name}</TableCell>\n                    <TableCell align=\"left\" className={`${value >  previous_value && classes.up} ${value < previous_value && classes.down}`}>\n                        {value}\n                    </TableCell>\n                    <TableCell align=\"right\">{this.getReadableTime(updated_at)}</TableCell>\n                </TableRow>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default withStyles(styles)(StockRow)","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport WebsocketService from '../../_lib/reconnecting-socket';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport StockRow from './elements/stock-row';\n\n\nconst styles={\n    container:{\n        maxWidth: '500px',\n        margin: 'auto'\n    }\n}\n\nclass StockTable extends Component {\n\n    socket_service;\n    state={\n        stock_data:{}\n    }\n\n    constructor(props){\n        super(props)\n        this.socket_service = new WebsocketService('ws://stocks.mnet.website')\n    }\n\n    componentDidMount(){\n\n        this.socket_service.connect().subscribe(\n            (data)=>{\n                this.handleIncoming(JSON.parse(data.data))\n            },\n            (err)=>{\n                console.log(err)\n            }\n        )\n    }\n\n    handleIncoming = (data)=>{\n        const {stock_data} = this.state;\n        for (let i = 0; i < data.length; i++) {\n            let item = data[i]\n            if (stock_data[item[0]]){\n                stock_data[item[0]] = {\n                        value: item[1],\n                        updated_at: new Date(),\n                        previous_value: stock_data[item[0]].value\n                }\n            }else {\n                stock_data[item[0]] = {\n                    value: item[1],\n                    updated_at: new Date(),\n                    previous_value: item[1]\n                }\n            }\n        }\n        this.setState({stock_data})\n    }\n\n    getTableRows = ()=>{\n        const {stock_data} = this.state;\n        const table = []\n        for (let key in stock_data){\n            let item = stock_data[key]\n\n            table.push(\n                <StockRow key={key} name={key} {...item} />\n            )\n        }\n\n        return table\n\n    }\n\n    render() {\n        const {classes} = this.props;\n        return (\n            <Paper className={classes.container}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Company</TableCell>\n                            <TableCell align=\"left\">Stock Value</TableCell>\n                            <TableCell align=\"right\">Last updated</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.getTableRows()}\n                    </TableBody>\n                </Table>\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles(styles)(StockTable);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport StockTable from './components/stock-data';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst styles={\n  root:{\n    padding: '16px',\n    paddingTop: '80px',\n  }\n}\n\nclass App extends Component {\n\n  render() {\n    const {classes} = this.props\n    return (\n      <div className={classes.root}>\n          <AppBar position=\"fixed\" color=\"primary\">\n              <Toolbar>\n                  <Typography variant=\"h6\" color=\"inherit\">\n                      Real Time Stock Values\n                  </Typography>\n              </Toolbar>\n          </AppBar>\n        <StockTable/>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}